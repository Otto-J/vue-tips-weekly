import{_ as s,c as n,o as a,a as e}from"./app.74a67ed3.js";const u=JSON.parse('{"title":"\u{1F525} (#69) Improving my ebook tool","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u{1F525} 6 Levels of Reusability","slug":"\u{1F525}-6-levels-of-reusability"},{"level":2,"title":"\u{1F525} Check Vue\u2019s Version","slug":"\u{1F525}-check-vue\u2019s-version"},{"level":2,"title":"\u{1F4DC} How to clean up global event listeners","slug":"\u{1F4DC}-how-to-clean-up-global-event-listeners"},{"level":2,"title":"\u{1F4AC} Two Types of Languages","slug":"\u{1F4AC}-two-types-of-languages"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Deep Linking with Vue Router","slug":"\u{1F9E0}-spaced-repetition-deep-linking-with-vue-router"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"069.md"}'),o={name:"069.md"},l=e(`<h1 id="\u{1F525}-69-improving-my-ebook-tool" tabindex="-1">\u{1F525} (#69) Improving my ebook tool <a class="header-anchor" href="#\u{1F525}-69-improving-my-ebook-tool" aria-hidden="true">#</a></h1><p>July 2022</p><p>Hey all!</p><p>This last week I spent some time updating my ebook tool.</p><p>I don&#39;t know how often I&#39;ll be publishing ebooks, but the easier it is the more likely I&#39;ll do it. And nice tools are just fun to work on!</p><p>Taking inspiration from Nuxt, I decided to use a folder-based set up. Mine is a little different though:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">content/</span></span>
<span class="line"><span style="color:#A6ACCD;">layouts/</span></span>
<span class="line"><span style="color:#A6ACCD;">styles/</span></span>
<span class="line"><span style="color:#A6ACCD;">table-of-contents.json</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>All the Markdown goes into <code>content/</code>, with a front matter field to specify which layout to use:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;">layout: chapter</span></span>
<span class="line"><span style="color:#A6ACCD;">title: Forgotten Features</span></span>
<span class="line"><span style="color:#A6ACCD;">subtitle: &quot;All those things you forgot Vue could do, or didn&#39;t know about in the first place.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The layouts are HTML with some basic mustache interpolation using the <code>mustache</code> package:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">chapter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h3</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Chapter</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ &amp;title }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ &amp;subtitle }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tips</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ &amp;content }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>I run all the fields through a Markdown parser so I can have Markdown styling in any field. But that means I need to escape all the HTML tags using the <code>&amp;&lt;var&gt;</code> syntax.</p><p>All of the styles are still in one file. But I plan on having a single stylesheet per layout \u2014at some point.</p><p>Lastly, the <code>table-of-contents</code> JSON is an array that specifies the order of the content:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;cover&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;table-of-contents&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;intro&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;ch-css&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  //...</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;ch-forgotten&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;back-cover&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>But enough about that!</p><p>Here are your tips.</p><p>\u2014Michael</p><h2 id="\u{1F525}-6-levels-of-reusability" tabindex="-1">\u{1F525} 6 Levels of Reusability <a class="header-anchor" href="#\u{1F525}-6-levels-of-reusability" aria-hidden="true">#</a></h2><p>There are six different levels of reusability that you can use in your components.</p><p>Each level adds more complexity but also increases your ability to reuse code.</p><p>These levels are the focus of my course, Reusable Components.</p><p>Here are the six levels of reusability:</p><ol><li><strong>Templating</strong> \u2014Reusing code by wrapping it up inside of a component</li><li><strong>Configuration</strong> \u2014Using configuration props to allow for varying behaviour</li><li><strong>Adaptability</strong>\u2014Allowing components to become future-proof</li><li><strong>Inversion</strong> \u2014Letting other components control the process</li><li><strong>Extension</strong> \u2014Using reusability throughout our component</li><li><strong>Nesting</strong>\u2014Creating powerful hierarchies of components</li></ol><p>I cover this in more detail in <a href="https://michaelnthiessen.com/6-levels-of-reusability" target="_blank" rel="noopener noreferrer">this excerpt from the course</a>.</p><h2 id="\u{1F525}-check-vue\u2019s-version" tabindex="-1">\u{1F525} Check Vue\u2019s Version <a class="header-anchor" href="#\u{1F525}-check-vue\u2019s-version" aria-hidden="true">#</a></h2><p>Did you know that you can easily check the version of Vue at runtime?</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">version</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (version</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Uh, this app is gonna crash.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Upgrade to Vue 3!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="\u{1F4DC}-how-to-clean-up-global-event-listeners" tabindex="-1">\u{1F4DC} How to clean up global event listeners <a class="header-anchor" href="#\u{1F4DC}-how-to-clean-up-global-event-listeners" aria-hidden="true">#</a></h2><p>Markus wrote a great article on the best way to deal with event handlers in your <a href="http://component.It" target="_blank" rel="noopener noreferrer">component.It</a> took me awhile to get into the habit of properly dealing with event handlers like this.</p><p>I recently was working on a component that had about 7 or 8 global event handlers, so I used this array pattern:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Add directly so it doesn&#39;t become reactive</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">eventListeners</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">      [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mouseout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">handleMouseOut</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">handleClick</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">    ]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handler</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">eventListeners</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handler</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeDestroy</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handler</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">eventListeners</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handler</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Arrays are nothing new, but it was a nice way to clean it up.</p><p>Read it here: <a href="https://markus.oberlehner.net/blog/how-to-clean-up-global-event-listeners-intervals-and-third-party-libraries-in-vue-components/" target="_blank" rel="noopener noreferrer">How to clean up global event listeners</a></p><h2 id="\u{1F4AC}-two-types-of-languages" tabindex="-1">\u{1F4AC} Two Types of Languages <a class="header-anchor" href="#\u{1F4AC}-two-types-of-languages" aria-hidden="true">#</a></h2><p>&quot;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&quot; \u2014Bjarne Stroustrup</p><h2 id="\u{1F9E0}-spaced-repetition-deep-linking-with-vue-router" tabindex="-1">\u{1F9E0} Spaced-repetition: Deep Linking with Vue Router <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-deep-linking-with-vue-router" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>You can store (a bit of) state in the URL, allowing you to jump right into a specific state on the page.</p><p>For example, you can load a page with a date range filter already selected:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">someurl.com/edit?date-range=last-week</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>This is great for the parts of your app where users may share lots of links, for a server-rendered app, or for communicating more information between two separate apps than a regular link provides typically.</p><p>You can store filters, search values, whether a modal is open or closed, or where in a list we&#39;ve scrolled to \u2014 perfect for infinite pagination.</p><p>Grabbing the query using <code>vue-router</code> works like this (this will work on most Vue frameworks like Nuxt and Vuepress too):</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dateRange </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$route</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dateRange</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>To change it we use the <code>RouterLink</code> component and update the <code>query</code>:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">RouterLink</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#C3E88D;">  query: {</span></span>
<span class="line"><span style="color:#C3E88D;">    dateRange: newDateRange</span></span>
<span class="line"><span style="color:#C3E88D;">  }</span></span>
<span class="line"><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Here&#39;s a demo of this in action:</p><p><a href="https://codesandbox.io/s/deep-linking-with-vue-router-vhxkq?file=/src/components/DeepLinking.vue" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/deep-linking-with-vue-router-vhxkq?file=/src/components/DeepLinking.vue</a></p><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p><a href="https://michaelnthiessen.com/weekly-069-july-13/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-069-july-13/</a></p>`,53),p=[l];function t(r,c,i,y,D,F){return a(),n("div",null,p)}var d=s(o,[["render",t]]);export{u as __pageData,d as default};
